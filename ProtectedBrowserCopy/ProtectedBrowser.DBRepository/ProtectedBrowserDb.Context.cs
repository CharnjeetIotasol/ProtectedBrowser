//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProtectedBrowser.DBRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProtectedBrowserEntities : DbContext
    {
        public ProtectedBrowserEntities()
            : base("name=ProtectedBrowserEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Nullable<decimal>> AppointmentInsert(Nullable<long> createdBy, Nullable<System.DateTimeOffset> appointmentDate, string note, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<long> toUserId, Nullable<long> fromUserId, string status)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTimeOffset));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var toUserIdParameter = toUserId.HasValue ?
                new ObjectParameter("ToUserId", toUserId) :
                new ObjectParameter("ToUserId", typeof(long));
    
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AppointmentInsert", createdByParameter, appointmentDateParameter, noteParameter, startTimeParameter, endTimeParameter, toUserIdParameter, fromUserIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<AppointmentSelect_Result> AppointmentSelect(Nullable<long> id, Nullable<long> toUserId, Nullable<long> fromUserId, Nullable<System.DateTimeOffset> appointmentDate, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate, Nullable<int> next, Nullable<int> offset)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var toUserIdParameter = toUserId.HasValue ?
                new ObjectParameter("ToUserId", toUserId) :
                new ObjectParameter("ToUserId", typeof(long));
    
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(long));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTimeOffset));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppointmentSelect_Result>("AppointmentSelect", idParameter, toUserIdParameter, fromUserIdParameter, appointmentDateParameter, startDateParameter, endDateParameter, nextParameter, offsetParameter);
        }
    
        public virtual int AppointmentUpdate(Nullable<long> id, Nullable<long> updatedBy, Nullable<System.DateTimeOffset> updatedOn, Nullable<bool> isActive, Nullable<System.DateTimeOffset> appointmentDate, string note, Nullable<long> toUserId, Nullable<long> fromUserId, Nullable<bool> isCancel, string cancellationReason, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<bool> isAppointmentDone, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTimeOffset));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTimeOffset));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var toUserIdParameter = toUserId.HasValue ?
                new ObjectParameter("ToUserId", toUserId) :
                new ObjectParameter("ToUserId", typeof(long));
    
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(long));
    
            var isCancelParameter = isCancel.HasValue ?
                new ObjectParameter("IsCancel", isCancel) :
                new ObjectParameter("IsCancel", typeof(bool));
    
            var cancellationReasonParameter = cancellationReason != null ?
                new ObjectParameter("CancellationReason", cancellationReason) :
                new ObjectParameter("CancellationReason", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var isAppointmentDoneParameter = isAppointmentDone.HasValue ?
                new ObjectParameter("isAppointmentDone", isAppointmentDone) :
                new ObjectParameter("isAppointmentDone", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppointmentUpdate", idParameter, updatedByParameter, updatedOnParameter, isActiveParameter, appointmentDateParameter, noteParameter, toUserIdParameter, fromUserIdParameter, isCancelParameter, cancellationReasonParameter, startTimeParameter, endTimeParameter, isAppointmentDoneParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> BlogInsert(string title, string description, Nullable<long> categoryId, Nullable<bool> isActive, Nullable<long> createdBy, Nullable<long> fileId)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("BlogInsert", titleParameter, descriptionParameter, categoryIdParameter, isActiveParameter, createdByParameter, fileIdParameter);
        }
    
        public virtual ObjectResult<BlogSelect_Result> BlogSelect(Nullable<long> id, Nullable<bool> isActive, Nullable<long> categoryId, Nullable<int> next, Nullable<int> offset)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BlogSelect_Result>("BlogSelect", idParameter, isActiveParameter, categoryIdParameter, nextParameter, offsetParameter);
        }
    
        public virtual int BlogUpdate(Nullable<long> id, string title, string description, Nullable<long> categoryId, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<long> updatedBy, Nullable<long> fileId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BlogUpdate", idParameter, titleParameter, descriptionParameter, categoryIdParameter, isDeletedParameter, isActiveParameter, updatedByParameter, fileIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CategoryInsert(string categoryName, Nullable<bool> isActive, Nullable<long> createdBy)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CategoryInsert", categoryNameParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CategorySelect_Result> CategorySelect(Nullable<long> categoryId, Nullable<bool> isActive, Nullable<int> next, Nullable<int> offset)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategorySelect_Result>("CategorySelect", categoryIdParameter, isActiveParameter, nextParameter, offsetParameter);
        }
    
        public virtual int CategoryUpdate(Nullable<long> categoryId, string categoryName, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<long> updatedBy)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(long));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoryUpdate", categoryIdParameter, categoryNameParameter, isActiveParameter, isDeletedParameter, updatedByParameter);
        }
    
        public virtual int ContactUsDelete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactUsDelete", idParameter);
        }
    
        public virtual int ContactUsInsert(string name, string phoneNumber, string emailAddress, string message)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactUsInsert", nameParameter, phoneNumberParameter, emailAddressParameter, messageParameter);
        }
    
        public virtual ObjectResult<ContactUsSelect_Result> ContactUsSelect(Nullable<long> id, Nullable<int> next, Nullable<int> offset)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactUsSelect_Result>("ContactUsSelect", idParameter, nextParameter, offsetParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> DailyWorkSettingAction(Nullable<bool> sun, Nullable<bool> mon, Nullable<bool> tue, Nullable<bool> wed, Nullable<bool> thu, Nullable<bool> fri, Nullable<bool> sat, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<System.TimeSpan> startLunchTime, Nullable<System.TimeSpan> endLunchTime, Nullable<long> createdBy, Nullable<int> id)
        {
            var sunParameter = sun.HasValue ?
                new ObjectParameter("Sun", sun) :
                new ObjectParameter("Sun", typeof(bool));
    
            var monParameter = mon.HasValue ?
                new ObjectParameter("Mon", mon) :
                new ObjectParameter("Mon", typeof(bool));
    
            var tueParameter = tue.HasValue ?
                new ObjectParameter("Tue", tue) :
                new ObjectParameter("Tue", typeof(bool));
    
            var wedParameter = wed.HasValue ?
                new ObjectParameter("Wed", wed) :
                new ObjectParameter("Wed", typeof(bool));
    
            var thuParameter = thu.HasValue ?
                new ObjectParameter("Thu", thu) :
                new ObjectParameter("Thu", typeof(bool));
    
            var friParameter = fri.HasValue ?
                new ObjectParameter("Fri", fri) :
                new ObjectParameter("Fri", typeof(bool));
    
            var satParameter = sat.HasValue ?
                new ObjectParameter("Sat", sat) :
                new ObjectParameter("Sat", typeof(bool));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var startLunchTimeParameter = startLunchTime.HasValue ?
                new ObjectParameter("StartLunchTime", startLunchTime) :
                new ObjectParameter("StartLunchTime", typeof(System.TimeSpan));
    
            var endLunchTimeParameter = endLunchTime.HasValue ?
                new ObjectParameter("EndLunchTime", endLunchTime) :
                new ObjectParameter("EndLunchTime", typeof(System.TimeSpan));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("DailyWorkSettingAction", sunParameter, monParameter, tueParameter, wedParameter, thuParameter, friParameter, satParameter, startTimeParameter, endTimeParameter, startLunchTimeParameter, endLunchTimeParameter, createdByParameter, idParameter);
        }
    
        public virtual ObjectResult<DailyWorkSettingSelect_Result> DailyWorkSettingSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DailyWorkSettingSelect_Result>("DailyWorkSettingSelect");
        }
    
        public virtual ObjectResult<Nullable<decimal>> DirectoryInsert(Nullable<long> createdBy, Nullable<long> updatedBy, Nullable<bool> isActive, string rootPath, string userName, string password, string name)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var rootPathParameter = rootPath != null ?
                new ObjectParameter("RootPath", rootPath) :
                new ObjectParameter("RootPath", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("DirectoryInsert", createdByParameter, updatedByParameter, isActiveParameter, rootPathParameter, userNameParameter, passwordParameter, nameParameter);
        }
    
        public virtual ObjectResult<DirectorySelect_Result> DirectorySelect(Nullable<long> id, Nullable<bool> isActive, Nullable<int> next, Nullable<int> offset)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DirectorySelect_Result>("DirectorySelect", idParameter, isActiveParameter, nextParameter, offsetParameter);
        }
    
        public virtual int DirectoryUpdate(Nullable<long> id, Nullable<long> createdBy, Nullable<long> updatedBy, Nullable<System.DateTimeOffset> createdOn, Nullable<System.DateTimeOffset> updatedOn, Nullable<bool> isDeleted, Nullable<bool> isActive, string rootPath, string userName, string password, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTimeOffset));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTimeOffset));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var rootPathParameter = rootPath != null ?
                new ObjectParameter("RootPath", rootPath) :
                new ObjectParameter("RootPath", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DirectoryUpdate", idParameter, createdByParameter, updatedByParameter, createdOnParameter, updatedOnParameter, isDeletedParameter, isActiveParameter, rootPathParameter, userNameParameter, passwordParameter, nameParameter);
        }
    
        public virtual int DirectoryXMLSave(string directoryXml)
        {
            var directoryXmlParameter = directoryXml != null ?
                new ObjectParameter("DirectoryXml", directoryXml) :
                new ObjectParameter("DirectoryXml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DirectoryXMLSave", directoryXmlParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> DummyTableForFileSave(string name, Nullable<long> createdBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("DummyTableForFileSave", nameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<DummyTableForFileSelect_Result> DummyTableForFileSelect(Nullable<long> id, string type, Nullable<int> next, Nullable<int> offset)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DummyTableForFileSelect_Result>("DummyTableForFileSelect", idParameter, typeParameter, nextParameter, offsetParameter);
        }
    
        public virtual int DummyTableForFileUpdate(string name, Nullable<long> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<long> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DummyTableForFileUpdate", nameParameter, updatedByParameter, isDeletedParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<EmailConfigurationSelect_Result> EmailConfigurationSelect(string configurationKey)
        {
            var configurationKeyParameter = configurationKey != null ?
                new ObjectParameter("ConfigurationKey", configurationKey) :
                new ObjectParameter("ConfigurationKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailConfigurationSelect_Result>("EmailConfigurationSelect", configurationKeyParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> FileGroupInsert(Nullable<long> createdBy, string name, string type)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("FileGroupInsert", createdByParameter, nameParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> FileGroupItemInsert(Nullable<long> createdBy, string fileName, string mimeType, string thumbnail, Nullable<long> size, string path, string originalName, string onServer, Nullable<long> typeId, string type)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var mimeTypeParameter = mimeType != null ?
                new ObjectParameter("MimeType", mimeType) :
                new ObjectParameter("MimeType", typeof(string));
    
            var thumbnailParameter = thumbnail != null ?
                new ObjectParameter("Thumbnail", thumbnail) :
                new ObjectParameter("Thumbnail", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var originalNameParameter = originalName != null ?
                new ObjectParameter("OriginalName", originalName) :
                new ObjectParameter("OriginalName", typeof(string));
    
            var onServerParameter = onServer != null ?
                new ObjectParameter("OnServer", onServer) :
                new ObjectParameter("OnServer", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("FileGroupItemInsert", createdByParameter, fileNameParameter, mimeTypeParameter, thumbnailParameter, sizeParameter, pathParameter, originalNameParameter, onServerParameter, typeIdParameter, typeParameter);
        }
    
        public virtual int FileGroupItemsDelete(Nullable<long> id, Nullable<long> updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FileGroupItemsDelete", idParameter, updatedByParameter);
        }
    
        public virtual int FileGroupItemsInsertXml(Nullable<long> userId, Nullable<long> typeId, string fileGroupItemsXml)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(long));
    
            var fileGroupItemsXmlParameter = fileGroupItemsXml != null ?
                new ObjectParameter("FileGroupItemsXml", fileGroupItemsXml) :
                new ObjectParameter("FileGroupItemsXml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FileGroupItemsInsertXml", userIdParameter, typeIdParameter, fileGroupItemsXmlParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertExceptionLog(string source, string message, string stackTrace, string uri, string method, Nullable<long> createdBy)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var uriParameter = uri != null ?
                new ObjectParameter("Uri", uri) :
                new ObjectParameter("Uri", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertExceptionLog", sourceParameter, messageParameter, stackTraceParameter, uriParameter, methodParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LeaveInsert(Nullable<long> createdBy, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string type, string description, Nullable<long> userId)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LeaveInsert", createdByParameter, startDateParameter, endDateParameter, startTimeParameter, endTimeParameter, typeParameter, descriptionParameter, userIdParameter);
        }
    
        public virtual ObjectResult<LeaveSelect_Result> LeaveSelect(Nullable<long> id, Nullable<long> userId, Nullable<System.DateTimeOffset> appointmentDate, Nullable<int> next, Nullable<int> offset)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTimeOffset));
    
            var nextParameter = next.HasValue ?
                new ObjectParameter("next", next) :
                new ObjectParameter("next", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaveSelect_Result>("LeaveSelect", idParameter, userIdParameter, appointmentDateParameter, nextParameter, offsetParameter);
        }
    
        public virtual int LeaveUpdate(Nullable<long> id, Nullable<long> updatedBy, Nullable<System.DateTimeOffset> updatedOn, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string type, string description, Nullable<long> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTimeOffset));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaveUpdate", idParameter, updatedByParameter, updatedOnParameter, isDeletedParameter, isActiveParameter, startDateParameter, endDateParameter, startTimeParameter, endTimeParameter, typeParameter, descriptionParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> PublicHolidaysInsert(Nullable<System.DateTimeOffset> startHoliday, Nullable<System.DateTimeOffset> endHoliday, string description, Nullable<long> createdBy)
        {
            var startHolidayParameter = startHoliday.HasValue ?
                new ObjectParameter("StartHoliday", startHoliday) :
                new ObjectParameter("StartHoliday", typeof(System.DateTimeOffset));
    
            var endHolidayParameter = endHoliday.HasValue ?
                new ObjectParameter("EndHoliday", endHoliday) :
                new ObjectParameter("EndHoliday", typeof(System.DateTimeOffset));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("PublicHolidaysInsert", startHolidayParameter, endHolidayParameter, descriptionParameter, createdByParameter);
        }
    
        public virtual ObjectResult<PublicHolidaysSelect_Result> PublicHolidaysSelect(Nullable<long> id, Nullable<System.DateTimeOffset> todayDate, Nullable<System.DateTimeOffset> startDate, Nullable<System.DateTimeOffset> endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("TodayDate", todayDate) :
                new ObjectParameter("TodayDate", typeof(System.DateTimeOffset));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTimeOffset));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PublicHolidaysSelect_Result>("PublicHolidaysSelect", idParameter, todayDateParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int PublicHolidaysUpdate(Nullable<System.DateTimeOffset> startHoliday, Nullable<System.DateTimeOffset> endHoliday, string description, Nullable<long> updatedBy, Nullable<bool> isDeleted, Nullable<long> id)
        {
            var startHolidayParameter = startHoliday.HasValue ?
                new ObjectParameter("StartHoliday", startHoliday) :
                new ObjectParameter("StartHoliday", typeof(System.DateTimeOffset));
    
            var endHolidayParameter = endHoliday.HasValue ?
                new ObjectParameter("EndHoliday", endHoliday) :
                new ObjectParameter("EndHoliday", typeof(System.DateTimeOffset));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PublicHolidaysUpdate", startHolidayParameter, endHolidayParameter, descriptionParameter, updatedByParameter, isDeletedParameter, idParameter);
        }
    
        public virtual ObjectResult<SelectUserProfileByUniqueCode_Result> SelectUserProfileByUniqueCode(string uniqueCode)
        {
            var uniqueCodeParameter = uniqueCode != null ?
                new ObjectParameter("UniqueCode", uniqueCode) :
                new ObjectParameter("UniqueCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserProfileByUniqueCode_Result>("SelectUserProfileByUniqueCode", uniqueCodeParameter);
        }
    
        public virtual int UpdateUserProfile(Nullable<long> userId, string firstName, string lastName, string phoneNumber, Nullable<bool> isActive, string profileImageUrl)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var profileImageUrlParameter = profileImageUrl != null ?
                new ObjectParameter("ProfileImageUrl", profileImageUrl) :
                new ObjectParameter("ProfileImageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserProfile", userIdParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, isActiveParameter, profileImageUrlParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UploadedFileInsert(string fileName, string fileUrl)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileUrlParameter = fileUrl != null ?
                new ObjectParameter("FileUrl", fileUrl) :
                new ObjectParameter("FileUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UploadedFileInsert", fileNameParameter, fileUrlParameter);
        }
    }
}
